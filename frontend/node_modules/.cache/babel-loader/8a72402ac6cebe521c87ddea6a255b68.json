{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// // import { Line } from \"react-chartjs-2\";\n// import numeral from \"numeral\";\n// // import 'chart.js/auto';\n// // import 'chartjs-adapter-date-fns';\n// import \"./Graph.css\";\n// const options = {\n//   legend: {\n//     display: true,\n//   },\n//   elements: {\n//     point: {\n//       radius: 0,\n//     },\n//   },\n//   maintainAspectRatio: false,\n//   tooltips: {\n//     mode: \"index\",\n//     intersect: false,\n//     callbacks: {\n//       label: function (tooltipItem, data) {\n//         return numeral(tooltipItem.value).format(\"+0,0\");\n//       },\n//     },\n//   },\n//   scales: {\n//     xAxes: [\n//       {\n//         type: \"time\",\n//         display: false,\n//         time: {\n//           format: \"MM/DD/YY\",\n//           tooltipFormat: \"ll\",\n//         },\n//       },\n//     ],\n//     yAxes: [\n//       {\n//         gridLines: {\n//           display: false,\n//         },\n//         ticks: {\n//           // Include a dollar sign in the ticks\n//           callback: function (value, index, values) {\n//             return numeral(value).format(\"0a\");\n//           },\n//         },\n//       },\n//     ],\n//   },\n// };\n// const buildChartData = (data, casesType) => {\n//     let chartData = [];\n//     let lastDataPoint;\n//     for (let date in data.cases) {\n//       if (lastDataPoint) {\n//         let newDataPoint = {\n//           x: date,\n//           y: data[casesType][date] - lastDataPoint,\n//         };\n//         chartData.push(newDataPoint);\n//       }\n//       lastDataPoint = data[casesType][date];\n//     }\n//     console.log(\"data for chart >>>\", data)\n//     return chartData;\n//   };\n// function Strategy({ casesType='cases' }) {\n//     const [data, setData] = useState({});\n//     useEffect(() => {\n//         const fetchData = async () => {\n//           await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n//             .then((response) => {\n//               return response.json();\n//             })\n//             .then((data) => {\n//               let chartData = buildChartData(data, casesType);\n//               setData(chartData);\n//               // buildChart(chartData);\n//             });\n//         };\n//         fetchData();\n//       }, [casesType]);\n//   return (\n//         <div class=\"strategy__graph\">\n//             {data?.length > 0 && (\n//         <Line\n//           data={{\n//             datasets: [\n//               {\n//                 backgroundColor: \"#3cb371\",\n//                 borderColor: \"#00ff00\",\n//                 data: data,\n//                 label: \"Cumulative Returns Matador vs. S&P 500\"\n//               },\n//             ],\n//           }}\n//           options={options}\n//         />\n//       )}\n//         </div>\n//   )\n// }\n// export default Strategy","map":{"version":3,"names":[],"sources":["/Users/ryanmarr/Documents/Quantitative-Analysis-Site-ws/Quantitative_Analysis_Site/frontend/src/components/Graph.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// // import { Line } from \"react-chartjs-2\";\n// import numeral from \"numeral\";\n\n// // import 'chart.js/auto';\n// // import 'chartjs-adapter-date-fns';\n\n// import \"./Graph.css\";\n\n// const options = {\n//   legend: {\n//     display: true,\n//   },\n//   elements: {\n//     point: {\n//       radius: 0,\n//     },\n//   },\n//   maintainAspectRatio: false,\n//   tooltips: {\n//     mode: \"index\",\n//     intersect: false,\n//     callbacks: {\n//       label: function (tooltipItem, data) {\n//         return numeral(tooltipItem.value).format(\"+0,0\");\n//       },\n//     },\n//   },\n//   scales: {\n//     xAxes: [\n//       {\n//         type: \"time\",\n//         display: false,\n//         time: {\n//           format: \"MM/DD/YY\",\n//           tooltipFormat: \"ll\",\n//         },\n//       },\n//     ],\n//     yAxes: [\n//       {\n//         gridLines: {\n//           display: false,\n//         },\n//         ticks: {\n//           // Include a dollar sign in the ticks\n//           callback: function (value, index, values) {\n//             return numeral(value).format(\"0a\");\n//           },\n//         },\n//       },\n//     ],\n//   },\n// };\n\n\n// const buildChartData = (data, casesType) => {\n//     let chartData = [];\n//     let lastDataPoint;\n//     for (let date in data.cases) {\n//       if (lastDataPoint) {\n//         let newDataPoint = {\n//           x: date,\n//           y: data[casesType][date] - lastDataPoint,\n//         };\n//         chartData.push(newDataPoint);\n//       }\n//       lastDataPoint = data[casesType][date];\n//     }\n//     console.log(\"data for chart >>>\", data)\n//     return chartData;\n//   };\n  \n  \n\n\n// function Strategy({ casesType='cases' }) {\n\n//     const [data, setData] = useState({});\n\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//           await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n//             .then((response) => {\n//               return response.json();\n//             })\n//             .then((data) => {\n//               let chartData = buildChartData(data, casesType);\n//               setData(chartData);\n//               // buildChart(chartData);\n//             });\n//         };\n    \n//         fetchData();\n//       }, [casesType]);\n    \n    \n//   return (\n\n        \n//         <div class=\"strategy__graph\">\n//             {data?.length > 0 && (\n//         <Line\n//           data={{\n//             datasets: [\n//               {\n//                 backgroundColor: \"#3cb371\",\n//                 borderColor: \"#00ff00\",\n//                 data: data,\n//                 label: \"Cumulative Returns Matador vs. S&P 500\"\n//               },\n//             ],\n//           }}\n//           options={options}\n//         />\n//       )}\n\n//         </div>\n//   )\n// }\n\n// export default Strategy"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}