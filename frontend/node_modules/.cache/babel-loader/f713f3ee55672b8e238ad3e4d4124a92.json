{"ast":null,"code":"// Super fast physics simulations for JavaScript\n// Copyright 2014 Ralph Thomas\n// Licensed under the Apache License, Version 2.0\n// https://github.com/iamralpht/gravitas.js\n// Adapted to TypeScript and customized by Tanner Linsley (@tannerlinsley)\nvar epsilon = 0.001;\n\nfunction almostEqual(a, b) {\n  if (Number.isNaN(a) && Number.isNaN(b)) {\n    return true;\n  }\n\n  return a > b - epsilon && a < b + epsilon;\n}\n\nfunction almostZero(a) {\n  return almostEqual(a, 0);\n}\n\nexport var Spring = /*#__PURE__*/function () {\n  function Spring(init, mass, springConstant, damping) {\n    this._m = mass;\n    this._k = springConstant;\n    this._c = damping;\n    this._solution = null;\n    this.endPosition = init;\n    this._startTime = 0;\n  }\n\n  var _proto = Spring.prototype;\n\n  _proto.x = function x(dt) {\n    if (dt === undefined) {\n      dt = (new Date().getTime() - this._startTime) / 1000.0;\n    }\n\n    return this._solution ? this.endPosition + this._solution.x(dt) : this.endPosition;\n  };\n\n  _proto.dx = function dx(dt) {\n    if (dt === undefined) {\n      dt = (new Date().getTime() - this._startTime) / 1000.0;\n    }\n\n    return this._solution ? this._solution.dx(dt) : 0;\n  };\n\n  _proto.setEnd = function setEnd(x) {\n    var t = new Date().getTime();\n    var velocity = 0;\n    var position = this.endPosition;\n\n    if (this._solution) {\n      // Don't whack incoming velocity.\n      if (almostZero(velocity)) velocity = this._solution.dx((t - this._startTime) / 1000.0);\n      position = this._solution.x((t - this._startTime) / 1000.0);\n      if (almostZero(velocity)) velocity = 0;\n      if (almostZero(position)) position = 0;\n      position += this.endPosition;\n    }\n\n    if (this._solution && almostZero(position - x) && almostZero(velocity)) {\n      return;\n    }\n\n    this.endPosition = x;\n    this._solution = this._solve(position - this.endPosition, velocity);\n    this._startTime = t;\n  };\n\n  _proto.snap = function snap(x) {\n    this._startTime = new Date().getTime();\n    this.endPosition = x;\n    this._solution = {\n      x: function x() {\n        return 0;\n      },\n      dx: function dx() {\n        return 0;\n      }\n    };\n  };\n\n  _proto.done = function done() {\n    return almostEqual(this.x(), this.endPosition) && almostZero(this.dx());\n  } // reconfigure(mass: number, springConstant: number, damping: number) {\n  //   this._m = mass\n  //   this._k = springConstant\n  //   this._c = damping\n  //   if (this.done()) {\n  //     return\n  //   }\n  //   this._solution = this._solve(this.x() - this.endPosition, this.dx())\n  //   this._startTime = new Date().getTime()\n  // }\n  // springConstant() {\n  //   return this._k\n  // }\n  // damping() {\n  //   return this._c\n  // }\n  ;\n\n  _proto._solve = function _solve(initial, velocity) {\n    var c = this._c;\n    var m = this._m;\n    var k = this._k; // Solve the quadratic equation; root = (-c +/- sqrt(c^2 - 4mk)) / 2m.\n\n    var cmk = c * c - 4 * m * k;\n\n    if (cmk === 0) {\n      // The spring is critically damped.\n      // x = (c1 + c2*t) * e ^(-c/2m)*t\n      var r = -c / (2 * m);\n      var c1 = initial;\n      var c2 = velocity / (r * initial);\n      return {\n        x: function x(t) {\n          return (c1 + c2 * t) * Math.pow(Math.E, r * t);\n        },\n        dx: function dx(t) {\n          var pow = Math.pow(Math.E, r * t);\n          return r * (c1 + c2 * t) * pow + c2 * pow;\n        }\n      };\n    } else if (cmk > 0) {\n      // The spring is overdamped; no bounces.\n      // x = c1*e^(r1*t) + c2*e^(r2t)\n      // Need to find r1 and r2, the roots, then solve c1 and c2.\n      var r1 = (-c - Math.sqrt(cmk)) / (2 * m);\n      var r2 = (-c + Math.sqrt(cmk)) / (2 * m);\n\n      var _c = (velocity - r1 * initial) / (r2 - r1);\n\n      var _c2 = initial - _c;\n\n      return {\n        x: function x(t) {\n          return _c2 * Math.pow(Math.E, r1 * t) + _c * Math.pow(Math.E, r2 * t);\n        },\n        dx: function dx(t) {\n          return _c2 * r1 * Math.pow(Math.E, r1 * t) + _c * r2 * Math.pow(Math.E, r2 * t);\n        }\n      };\n    } else {\n      // The spring is underdamped, it has imaginary roots.\n      // r = -(c / 2*m) +- w*i\n      // w = sqrt(4mk - c^2) / 2m\n      // x = (e^-(c/2m)t) * (c1 * cos(wt) + c2 * sin(wt))\n      var w = Math.sqrt(4 * m * k - c * c) / (2 * m);\n\n      var _r = -(c / 2 * m);\n\n      var _c3 = initial;\n\n      var _c4 = (velocity - _r * initial) / w;\n\n      return {\n        x: function x(t) {\n          return Math.pow(Math.E, _r * t) * (_c3 * Math.cos(w * t) + _c4 * Math.sin(w * t));\n        },\n        dx: function dx(t) {\n          var power = Math.pow(Math.E, _r * t);\n          var cos = Math.cos(w * t);\n          var sin = Math.sin(w * t);\n          return power * (_c4 * w * cos - _c3 * w * sin) + _r * power * (_c4 * sin + _c3 * cos);\n        }\n      };\n    }\n  };\n\n  return Spring;\n}();","map":{"version":3,"names":["epsilon","almostEqual","a","b","Number","isNaN","almostZero","Spring","init","mass","springConstant","damping","_m","_k","_c","_solution","endPosition","_startTime","_proto","prototype","x","dt","undefined","Date","getTime","dx","setEnd","t","velocity","position","_solve","snap","done","initial","c","m","k","cmk","r","c1","c2","Math","pow","E","r1","sqrt","r2","_c2","w","_r","_c3","_c4","cos","sin","power"],"sources":["/Users/ryanmarr/Documents/Quantitative-Analysis-Site-ws/Quantitative_Analysis_Site/frontend/node_modules/react-charts/es/utils/spring.js"],"sourcesContent":["// Super fast physics simulations for JavaScript\n// Copyright 2014 Ralph Thomas\n// Licensed under the Apache License, Version 2.0\n// https://github.com/iamralpht/gravitas.js\n// Adapted to TypeScript and customized by Tanner Linsley (@tannerlinsley)\nvar epsilon = 0.001;\n\nfunction almostEqual(a, b) {\n  if (Number.isNaN(a) && Number.isNaN(b)) {\n    return true;\n  }\n\n  return a > b - epsilon && a < b + epsilon;\n}\n\nfunction almostZero(a) {\n  return almostEqual(a, 0);\n}\n\nexport var Spring = /*#__PURE__*/function () {\n  function Spring(init, mass, springConstant, damping) {\n    this._m = mass;\n    this._k = springConstant;\n    this._c = damping;\n    this._solution = null;\n    this.endPosition = init;\n    this._startTime = 0;\n  }\n\n  var _proto = Spring.prototype;\n\n  _proto.x = function x(dt) {\n    if (dt === undefined) {\n      dt = (new Date().getTime() - this._startTime) / 1000.0;\n    }\n\n    return this._solution ? this.endPosition + this._solution.x(dt) : this.endPosition;\n  };\n\n  _proto.dx = function dx(dt) {\n    if (dt === undefined) {\n      dt = (new Date().getTime() - this._startTime) / 1000.0;\n    }\n\n    return this._solution ? this._solution.dx(dt) : 0;\n  };\n\n  _proto.setEnd = function setEnd(x) {\n    var t = new Date().getTime();\n    var velocity = 0;\n    var position = this.endPosition;\n\n    if (this._solution) {\n      // Don't whack incoming velocity.\n      if (almostZero(velocity)) velocity = this._solution.dx((t - this._startTime) / 1000.0);\n      position = this._solution.x((t - this._startTime) / 1000.0);\n      if (almostZero(velocity)) velocity = 0;\n      if (almostZero(position)) position = 0;\n      position += this.endPosition;\n    }\n\n    if (this._solution && almostZero(position - x) && almostZero(velocity)) {\n      return;\n    }\n\n    this.endPosition = x;\n    this._solution = this._solve(position - this.endPosition, velocity);\n    this._startTime = t;\n  };\n\n  _proto.snap = function snap(x) {\n    this._startTime = new Date().getTime();\n    this.endPosition = x;\n    this._solution = {\n      x: function x() {\n        return 0;\n      },\n      dx: function dx() {\n        return 0;\n      }\n    };\n  };\n\n  _proto.done = function done() {\n    return almostEqual(this.x(), this.endPosition) && almostZero(this.dx());\n  } // reconfigure(mass: number, springConstant: number, damping: number) {\n  //   this._m = mass\n  //   this._k = springConstant\n  //   this._c = damping\n  //   if (this.done()) {\n  //     return\n  //   }\n  //   this._solution = this._solve(this.x() - this.endPosition, this.dx())\n  //   this._startTime = new Date().getTime()\n  // }\n  // springConstant() {\n  //   return this._k\n  // }\n  // damping() {\n  //   return this._c\n  // }\n  ;\n\n  _proto._solve = function _solve(initial, velocity) {\n    var c = this._c;\n    var m = this._m;\n    var k = this._k; // Solve the quadratic equation; root = (-c +/- sqrt(c^2 - 4mk)) / 2m.\n\n    var cmk = c * c - 4 * m * k;\n\n    if (cmk === 0) {\n      // The spring is critically damped.\n      // x = (c1 + c2*t) * e ^(-c/2m)*t\n      var r = -c / (2 * m);\n      var c1 = initial;\n      var c2 = velocity / (r * initial);\n      return {\n        x: function x(t) {\n          return (c1 + c2 * t) * Math.pow(Math.E, r * t);\n        },\n        dx: function dx(t) {\n          var pow = Math.pow(Math.E, r * t);\n          return r * (c1 + c2 * t) * pow + c2 * pow;\n        }\n      };\n    } else if (cmk > 0) {\n      // The spring is overdamped; no bounces.\n      // x = c1*e^(r1*t) + c2*e^(r2t)\n      // Need to find r1 and r2, the roots, then solve c1 and c2.\n      var r1 = (-c - Math.sqrt(cmk)) / (2 * m);\n      var r2 = (-c + Math.sqrt(cmk)) / (2 * m);\n\n      var _c = (velocity - r1 * initial) / (r2 - r1);\n\n      var _c2 = initial - _c;\n\n      return {\n        x: function x(t) {\n          return _c2 * Math.pow(Math.E, r1 * t) + _c * Math.pow(Math.E, r2 * t);\n        },\n        dx: function dx(t) {\n          return _c2 * r1 * Math.pow(Math.E, r1 * t) + _c * r2 * Math.pow(Math.E, r2 * t);\n        }\n      };\n    } else {\n      // The spring is underdamped, it has imaginary roots.\n      // r = -(c / 2*m) +- w*i\n      // w = sqrt(4mk - c^2) / 2m\n      // x = (e^-(c/2m)t) * (c1 * cos(wt) + c2 * sin(wt))\n      var w = Math.sqrt(4 * m * k - c * c) / (2 * m);\n\n      var _r = -(c / 2 * m);\n\n      var _c3 = initial;\n\n      var _c4 = (velocity - _r * initial) / w;\n\n      return {\n        x: function x(t) {\n          return Math.pow(Math.E, _r * t) * (_c3 * Math.cos(w * t) + _c4 * Math.sin(w * t));\n        },\n        dx: function dx(t) {\n          var power = Math.pow(Math.E, _r * t);\n          var cos = Math.cos(w * t);\n          var sin = Math.sin(w * t);\n          return power * (_c4 * w * cos - _c3 * w * sin) + _r * power * (_c4 * sin + _c3 * cos);\n        }\n      };\n    }\n  };\n\n  return Spring;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"module"}